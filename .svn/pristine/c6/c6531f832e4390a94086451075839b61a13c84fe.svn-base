/*
 * TCSS 305 - Project Tetris
 */
package view;


import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JOptionPane;
import javax.swing.Timer;

import model.Board;

/**
 * class implements the action of a key press.
 * 
 * @author Ben Russell
 * @version 1.0
 */
public class KeyPressListener implements KeyListener {
    /** represents the game board. */
    private final Board myBoard;
    /** the swing timer. */
    private final Timer myTimer;
    /** 
     * constructor.
     * @param theBoard the board
     * @param theTimer the swing timer
     */
    public KeyPressListener(final Board theBoard, final Timer theTimer) {
        super();
        myBoard = theBoard;
        myTimer = theTimer;
    }
    /**
     * tells the paint panel what to do with a specific key press.
     * @param theArg the key press
     */
    public void keyPressed(final KeyEvent theArg) {
        if (theArg.getKeyCode() == KeyEvent.VK_N) {
            newGame();        
        }
        if (myTimer.isRunning()) {
            final int key = theArg.getKeyCode();
        
            switch (key) {
                case KeyEvent.VK_A: 
                    myBoard.left();
                    break;
                case KeyEvent.VK_D:
                    myBoard.right();
                    break;
                case KeyEvent.VK_S:
                    myBoard.down();
                    break;
                case KeyEvent.VK_W: 
                    myBoard.drop();
                    break;
                case KeyEvent.VK_LEFT:
                    myBoard.rotateCCW();
                    break;
                case KeyEvent.VK_RIGHT:
                    myBoard.rotateCW();
                    break;
                case KeyEvent.VK_P:
                    pause();
                    break;                
                default:
                    break;
            } 
        }
    }
    /**
     * start a new game.
     */
    private void newGame() {
        if (!myTimer.isRunning()) {
            myBoard.newGame();
            myTimer.start();
        }
    }
    /**
     * pauses and un-pauses the game.
     */
    private void pause() {
        if (myTimer.isRunning()) {
            myTimer.stop();
            final int i = JOptionPane.showConfirmDialog(null
                                          , "Would you like to start a new game?"
                                          , "pause"
                                          , JOptionPane.YES_NO_OPTION
                                          , JOptionPane.QUESTION_MESSAGE);
            if (i == 1) {
                myTimer.start();
            } else {
                myBoard.newGame();
                myTimer.start();
            }
        }
    }
    @Override
    public void keyReleased(final KeyEvent thArg0) { }

    @Override
    public void keyTyped(final KeyEvent theArg0) { }
    
}
